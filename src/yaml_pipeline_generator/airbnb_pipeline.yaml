name: airbnb-baby-proj
schedule:
  # every month's first day
  - cron: "0 0 1 * *"

pipeline:
  stages:
    - id: airbnb_stage
      description: "stages for airbnb data"
      tasks:
        # id: <verb>
        # user_input:
        #   fields:
        #     - name: <what you will get back after the syntax> <noun>
        - id: webscrap_airbnb
          description: "get airbnb website page url"
          type: read
          function: http-request
          inputs:
            concurrent: true
            user_input:
              file_name: 'input.csv'
              file_format: csv
              # value: 'http://insideairbnb.com/get-thedata.html' (inside the csv file)
        - id: extract_content
          description: "get file links by xpath syntax"
          type: filter
          function: xpath
          inputs:
            user_input:
              field: "//a[contains(@href, 'listings.csv.gz')][contains(@href, 'http')][contains(@href, 'united-kingdom')]/@href"
            task_inputs:
              - from: webscrap_airbnb
        # transform a dataframe into several dataframes
        - id: create_city_dataframes
          description: "put different city data into different dataframes"
          type: transform
          # may need better naming for function name
          function: split-dataframe-rows
          inputs:
            task_inputs:
              - from: extract_content
        - id: request_listing_file
          description: "request file link"
          type: read
          function: http-request
          inputs:
            task_inputs:
              - from: create_city_dataframes
        # HOOK
        - id: decompress_file_str
          description: "decompress file str"
          type: transform
          function: decompress
          inputs:
            task_inputs:
              - from: request_listing_file
        - id: read_csv_str_to_table
          description: "read csv str to dataframe"
          type: transform
          function: transform-to-dataframe
          inputs:
            task_inputs:
              - str_type: csv
                from: decompress_file_str
        - id: filter_transform_listing
          description: "filter & transform fields by sql syntax"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT
                        `id`, `listing_url`, `host_location`, `name`, `latitude`, `longitude`, `price`, `number_of_reviews`, 
                        `review_scores_rating`, `review_scores_accuracy`, `review_scores_cleanliness`, 
                        `review_scores_checkin`, `review_scores_communication`, `review_scores_location`,
                        `review_scores_value`,  (30-availability_30) as unavailability_30, 1 as key
                    FROM read_csv_str_to_table
                    WHERE has_availability = 't' 
                       AND ((90-availability_90) != 90 OR (365-availability_365) != 365)
                    "
            task_inputs:
              - from: read_csv_str_to_table
        - id: filter_nan_rows
          name: "filter NaN rows"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT *
                    FROM filter_transform_listing
                    WHERE `unavailability_30` IS NOT NULL AND `latitude` IS NOT NULL AND `longitude` IS NOT NULL AND
                      `number_of_reviews` IS NOT NULL AND `review_scores_rating` IS NOT NULL AND `review_scores_accuracy` IS NOT NULL AND 
                      `review_scores_cleanliness` IS NOT NULL AND `review_scores_checkin` IS NOT NULL AND `review_scores_communication` IS NOT NULL AND 
                      `review_scores_location` IS NOT NULL AND `review_scores_value` IS NOT NULL AND `price` IS NOT NULL;
                  "
            task_inputs:
              - from: filter_transform_listing
        - id: concat_airbnb_dataframes
          description: "concat list of airbnb dataframes together"
          type: concat
          function: concat
          inputs:
            task_inputs:
              - from: filter_nan_rows
    - id: crime_stage
      from:
        - airbnb_stage
      tasks:
        - id: request_uk_crime_data
          description: "mapping request params"
          type: read
          function: http-request-dynamic
          inputs:
            concurrent: true
            user_input:
              base_url: "https://data.police.uk/api/crimes-street/all-crime"
              params_dynamic:
                # mapping maps task_inputs' output dataframe
                - name: lat
                  value: latitude
                - name: lng
                  value: longitude
              params_fixed:
                - name: date
                  value: '2021-11'
            task_inputs:
              - from: concat_airbnb_dataframes
        # wanna discuss with these two tasks
        - id: getting_crime_numbers
          description: "get crime statistic data"
          type: filter 
          function: json-path 
          inputs:
            user_input:
              field: '$.`len`' 
            task_inputs:
              - from: request_uk_crime_data
                extract_field: text
                # NEW ADDED: preserve origin data
                preserve_origin_data: True
        - id: rename_crime_columns
          description: "renamed text column into crime_incidents"
          type: transform
          function: rename-columns
          inputs:
            user_input:
              fields: 
                - text: crime_incidents
            task_inputs:
              - from: getting_crime_numbers
        - id: concat_crime_dataframes
          description: "concat list of crime dataframes together"
          type: concat
          function: concat
          inputs:
            task_inputs:
              - from: rename_crime_columns
    - id: merged_stage
      from:
          - airbnb_stage
          - crime_stage 
      tasks:
        - id: combine_airbnb_crime_data
          description: "combined two data sources into a big dataframe"
          type: merge
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT
                      `id`, `listing_url`, `name`, `host_location`, concat_airbnb_dataframes.latitude as `latitude`,
                      concat_airbnb_dataframes.longitude as `longitude`, `price`, `number_of_reviews`, 
                      `review_scores_rating`, `review_scores_accuracy`, `review_scores_cleanliness`, 
                      `review_scores_checkin`, `review_scores_communication`, `review_scores_location`, `review_scores_value`,
                      `crime_incidents`, `unavailability_30`
                    FROM concat_airbnb_dataframes
                    INNER JOIN  concat_crime_dataframes
                      ON (
                        concat_airbnb_dataframes.latitude = concat_crime_dataframes.latitude
                        AND
                        concat_airbnb_dataframes.longitude = concat_crime_dataframes.longitude
                      )
                  "
            task_inputs:
              - from: concat_airbnb_dataframes
              - from: concat_crime_dataframes
        - id: transform_price
          description: "transform price"
          type: filter
          function: sql
          inputs:
            user_input:
              field: "
                    SELECT `id`, `listing_url`, `host_location`, `name`, `unavailability_30`, `latitude`, `longitude`,
                      CAST(REPLACE(REPLACE(REPLACE(price, '$', ''), '.00', ''), ',' ,'') AS INT) as price,
                      `number_of_reviews`, `review_scores_rating`, `review_scores_accuracy`, `review_scores_cleanliness`, 
                      `review_scores_checkin`, `review_scores_communication`, `review_scores_location`,
                      `review_scores_value`, `crime_incidents`
                    FROM combine_airbnb_crime_data
                  "
            task_inputs:
              - from: combine_airbnb_crime_data
        - id: concat_final_dataframes
          description: "concat list of final dataframes together"
          type: concat
          function: concat
          inputs:
            task_inputs:
              - from: transform_price  

        
          
